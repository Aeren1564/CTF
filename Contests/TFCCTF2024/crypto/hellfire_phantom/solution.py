from sage.all import *
import random
from Crypto.Util.number import getPrime, isPrime, long_to_bytes, bytes_to_long
from Crypto.Util.Padding import pad
from Crypto.Cipher import AES
from hashlib import sha256

FLAG = b'REDACTED'
secret = 3182763716837142378046258424310770114697574212011835
b_curve = 85127
p_curve = 4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000001
a_curve = 35220
p = 1154543773027194978300531105544404721440832315984713424625039
g = 2
shared = pow(g,secret,p)
print(shared)
secret2 = bytes_to_long(FLAG)
Z = GF(p_curve)
E = EllipticCurve(Z, [a_curve,b_curve])
G = E.lift_x(Z(secret), all=True)[1]
P = G * secret2




#P = E(623096442003276996005526819582785620084071954736463701753970373963912716099078435477704571257942074621357 , 2384627087675194082373873481003992989604314757777638917742582544298077858048626428935086473569758082583040)
big = 17229968799761915831961648039300568398720910455733592221895507193323
d = (P*big).log(G*big)
print(long_to_bytes(int(d)))