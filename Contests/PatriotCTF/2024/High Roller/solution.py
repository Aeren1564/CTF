#! /usr/bin/python3.10
from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from random import Random
import time
from itertools import count
from multiprocessing import Pool
import os

e = 9357885447383373532894895505085381556066479232870333782284357317530689434635519527644215046975239651802146048650000941858355721661518511867620441456288201
real_n = 98634120039089098694716541094010585689286433311349526663366541706397717606400616707193452046001090589663396231287196347120718771479123852243352063594083947086372781079441835003204477521976780690108126553882967223715412003897334440698277808850595475155858935951484345749354296015842014107721137899755292901639

def check(seed):
	r = Random()
	r.seed(seed)
	p = getPrime(512, r.randbytes)
	if real_n % p == 0:
		return p
	else:
		return None
with Pool(os.cpu_count()) as pool:
	for p in pool.imap_unordered(check, count(int(time.time() - 6 * 60 * 60), -1)):
		if p is not None:
			print(f"{p = }, {n // p = }")
			exit(0)