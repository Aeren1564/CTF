from CTF_Library import *

N = 85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867
c1 = 27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301
c2 = 30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649
e = bytes_to_long(b"idek{this_is_a_fake_flag_lolol}")
assert e % 2 == 1

p = 170829625398370252501980763763988409583
a = 164164878498114882034745803752027154293
b = 125172356708896457197207880391835698381
enc = int.from_bytes(long_to_bytes(c1 * pow(c2, -(e // 2), N) % N)[-16:], "big")

assert p.bit_length() == 128
assert is_prime(p)
F = GF(p)

assert F(a)**73331 == F(b)
ord_a = int(F(a).multiplicative_order())

X = F['X'].gen()
f = X**73331 + X - enc
for r in gcd(f, pow(X, p, f) - X).roots(multiplicities = False):
	print(f"{r = }")
	assert r + r**73331 == enc
	start = int(r.log(F(a)))
	def solve_for_rem(start, rem):
		x = start + ord_a * (rem + 2**33 // os.cpu_count() * os.cpu_count() + os.cpu_count())
		jump = ord_a * os.cpu_count()
		while x >= 0:
			try:
				flag = long_to_bytes(x)
				if 33 <= min(flag) and max(flag) <= 122:
					print("idek{" + flag.decode() + "}")
			except Exception as e:
				pass
			x -= jump
		return None
	with ProcessPoolExecutor(os.cpu_count()) as executor:
		for flag in executor.map(solve_for_rem, [start] * os.cpu_count(), range(os.cpu_count())):
			pass

"""
a^flag + a^(73331 * flag) = enc mod p
"""
